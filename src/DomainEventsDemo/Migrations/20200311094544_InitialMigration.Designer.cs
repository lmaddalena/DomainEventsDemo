// <auto-generated />
using System;
using DomainEventsDemo.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DomainEventsDemo.Migrations
{
    [DbContext(typeof(CartDataContext))]
    [Migration("20200311094544_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2");

            modelBuilder.Entity("DomainEventsDemo.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("REAL");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("CartId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("DomainEventsDemo.Models.CartItem", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("TEXT");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("REAL");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("CartId", "ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("DomainEventsDemo.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Description = "Bag",
                            Price = 10.0
                        },
                        new
                        {
                            ProductId = 2,
                            Description = "Glasses",
                            Price = 20.5
                        },
                        new
                        {
                            ProductId = 3,
                            Description = "Mug",
                            Price = 5.9900000000000002
                        },
                        new
                        {
                            ProductId = 4,
                            Description = "T-Shirt",
                            Price = 8.0
                        });
                });

            modelBuilder.Entity("DomainEventsDemo.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = "npaul",
                            Name = "Paul N."
                        },
                        new
                        {
                            UserId = "jdoe",
                            Name = "John Doe"
                        });
                });

            modelBuilder.Entity("DomainEventsDemo.Models.Cart", b =>
                {
                    b.HasOne("DomainEventsDemo.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DomainEventsDemo.Models.CartItem", b =>
                {
                    b.HasOne("DomainEventsDemo.Models.Cart", null)
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
